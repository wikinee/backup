" ~/.vimrc
" add alias vi='vim' in .bashrc or .zshrc or /etc/profile
" create by wikinee
" Dec.13, 2015 first release
" Rule
" Don't put anything in your .vimrc you don't understand!

" ==============================VundleVim=================================

set nocompatible              " be iMproved, use vim to do as vi, required
filetype off                  " required
set backspace=indent,eol,start " use backspace in Insert mode
set mouse=a
let &colorcolumn="81,"."121"
" set the runtime path to include Vundle and initialize
" $ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
set rtp+=/usr/share/vim/bundle/Vundle.vim
call vundle#begin('/usr/share/vim/bundle')
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin() to download in default path
 
" let Vundle manage Vundle, required
" plugin from https://github.com/ctrlpvim/ctrlp.vim
Plugin 'VundleVim/Vundle.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'rhysd/vim-clang-format'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'jiangmiao/auto-pairs'
" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.

" plugin on GitHub repo
" plugin from http://vim-scripts.org/vim/scripts.html

" https://github.com/Shougo/neocomplete.vim
" git@github.com:majutsushi/tagbar.git
" use vim-youcompleteme.deb and vam install youcompleteme 
" Plugin 'Valloric/YouCompleteMe'
Plugin 'majutsushi/tagbar'
Plugin 'sjl/gundo.vim'
" vim-fugitive will show git info
" Plugin 'tpope/vim-fugitive'

" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'

" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'

" https://github.com/mattn/emmet-vim
" Plugin 'mattn/emmet-vim'
Plugin 'vim-scripts/a.vim'
" Plugin 'vim-scripts/echofunc.vim'
" All of your Plugins must be added before the following line
call vundle#end()            " required

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" CtrlP settings
    "let g:ctrlp_map = '<leader>p'
    "let g:ctrlp_cmd = 'CtrlP'
    map <leader>f :CtrlPMRU<CR>
    let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
        \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
        \ }
    let g:ctrlp_working_path_mode=0
    let g:ctrlp_match_window_bottom=1
    let g:ctrlp_max_height=15
    let g:ctrlp_match_window_reversed=0
    let g:ctrlp_mruf_max=500
    let g:ctrlp_follow_symlinks=1
    let g:ctrlp_regexp = 0

" CtrlP help
    "ctrl + j/k: up / down
    "ctrl + x: split open
    "ctrl + v: vsplit open
    "ctrl + t: open in new tab 

" Airline settings
    " must install Powerline fonts, url:
    " https://github.com/powerline/fonts
    let g:airline_powerline_fonts=1 
    let g:airline#extensions#tabline#enabled = 1
    set guifont=Source\ Code\ Pro\ for\ Powerline
    " let g:airline_theme="luna" 
    let g:airline#extensions#tabline#buffer_nr_show = 1
    " ignore follow settings
    let g:airline#extensions#whitespace#enabled = 0
    let g:airline#extensions#whitespace#symbol = '!'

" NERDTree settings
    :map <C-f> :NERDTree<CR>
    " ctrl + w + w  switch tabs
    " o     open or close a folder or input go 
    " i      open file vertical split window or input gi
    " s     oepn file horizonal split window or input gs
    " t     create new tab,and jump
    " T     create new tab,but not jump
    " P     jump root
    " p     jump father
    " q     close NerdTree
    " K     same catalog first child
    " J      same catalog last child
    " :tabc close current tab
    " :tabo close other tab
    " :tabs check all open tab
    " :tabp preview tab
    " :tabn next tab
    " gt, gT command add gxxx  means preview the file 

" tarbar settings
    " tarbar need ctags
    let g:tagbar_ctags_bin='/usr/bin/ctags'
    let g:tagbar_width=30
    let g:tagbar_right=1
    "auto open tagbar
    autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()
    "key map tagbar toggle
    map <F8> :TagbarToggle<CR>

" emmet-vim settings 
    let g:user_emmet_mode='n'    "only enable normal mode functions.
    let g:user_emmet_mode='inv'  "enable all functions, which is equal to
    let g:user_emmet_mode='a'    "enable all function in all mode.
    let g:user_emmet_install_global = 0
    autocmd FileType html,css EmmetInstall
    let g:user_emmet_leader_key = '<C-e>'    " Control + e + ,

" echofunc settings
    " F9 will build tags file,
    " then, set tags=tags 
    " if you want use library tags, cd /usr/include
    " sudo ctags --c-kinds=+p --fields=+ailS --extra=+q .
    " other catalog
    " sudo ctags --c-kinds=+p --fields=+ailS --extra=+q -R
    set tags+=./tags
    set tags+=/usr/include/tags
    set tags+=/usr/include/glib-2.0/tags
    set tags+=/usr/include/gtk-3.0/tags
    " set tags+=/usr/include/c++/tags
    " set tags+=/usr/include/Qt/tags
    map <F9> :w !ctags -R --fields=+ailS --c-kinds=+p --extra=+q *<CR>

" syntastic settings
    " use gcc in syntastic
    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_c_include_dirs=['/usr/include/']
    let g:syntastic_c_config_file = $HOME.'.syntastic_clang_check_config'
    let g:syntastic_c_compiler = 'clang'
    let g:syntastic_c_compiler_options = ' -std=gnu89'
    let g:syntastic_c_remove_include_errors = 1
    let g:syntastic_c_check_header = 1
    let g:syntastic_c_auto_refresh_includes = 1
    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open=1
    let g:syntastic_error_symbol = '✗'
    let g:syntastic_warning_symbol = '⚠'
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_loc_list_height = 5
    let g:syntastic_enable_highlighting = 0
    " if you want kinds checkers
    let g:syntastic_c_checkers = ['clang_check','gcc','make']
    let g:syntastic_enable_highlighting = 0
    let g:syntastic_cpp_checkers = ['cpplint']
    let g:syntastic_cpp_cpplint_exec = 'cpplint'
    let g:syntastic_cpp_cpplint_thres = 5
    let g:syntastic_cpp_cpplint_args = '--verbose=3'  
    let g:syntastic_aggregate_errors = 1
    let g:syntastic_enable_balloons = 1
    nnoremap <F7> :SyntasticToggleMode <CR>

" YouCompleteMe settings
    " use clang in ycm
    map <F6> :YcmCompleter GoToDefinition<CR>
    nmap <F2> :YcmDiags<CR>
    " find global configure file
    " let g:ycm_global_ycm_extra_conf = '/usr/lib/ycmd/ycm_extra_conf.py'
    " forbid syntastic check python file
    let g:syntastic_ignore_files=[".*\.py$"] 
    " use ctags file
    let g:ycm_collect_identifiers_from_tag_files = 1
    " Start complete, change default hot key
    " default CTRL+space，change to Shift+space
    let g:ycm_key_invoke_completion = '<S-space>' 
    " keywords completion
    "let g:ycm_seed_identifiers_with_syntax = 1
    " set completeopt-=preview
    " do as other IDE action
    set completeopt=longest,menu
    " when vim start, show ycm_extra_conf file info
    let g:ycm_confirm_extra_conf=1
    " no cache
    let g:ycm_cache_omnifunc=0
    " complete in comments
    let g:ycm_complete_in_comments=1
    " input first character start completion
    let g:ycm_min_num_of_chars_for_completion=1
    " error symbol
    let g:ycm_error_symbol='✗'
    " warning symbol
    let g:ycm_warning_symbol='⚠'
    " no query ultisnips template，if necessary, set equal 1
    " let g:ycm_use_ultisnips_completer=0

    " let ycm and syntastic work together
    let g:ycm_register_as_syntastic_checker = 0

" =============================VIMRC===================================

" Colors
" /usr/share/vim/vim_VERSION/colors,default are following:
" blue, darkblue, default, delek, desert, elflord, evening,koehler
" morning, murphy, pablo, peachpuff, ron, shine, slate, torte, zellner 
" also can use you favorite scheme: molokai or solarized
    if has("syntax")
       syntax on
    endif
    set t_Co=256
    let g:solarized_termcolors=256
    set background=dark
    colorscheme solarized

" Space and Tab
    set tabstop=4           " tab is 4 spaces
    set expandtab           " use space replace tab


" UI config
    set number              " show line numbers
    set showcmd             " show command in bottom bar
    " set cursorline        " highlight current line, but fuzzy with under_line
    filetype indent on      " load filetype-specific indent files
    set wildmenu            " visual autocomplete for command menu
    set lazyredraw          " when run MACRO command，not review layout；after command complete，relayout once time
    set showmatch           " highlight matching [{()}], paterns


" Searching
    set incsearch           " search as characters are entered
    set hlsearch            " highlight matches
    " turn off search highlight
    " set nohlsearch    


" Folding
    set foldenable          " enable folding
    set foldlevelstart=10   " open most folds by default
    set foldnestmax=10      " 10 nested fold max


" Movement
    " move vertically by visual line
    " nnoremap only work in vim-normal mode,alike vnoremap, inoremap
    nnoremap j gj           
    nnoremap k gk
    " move to beginning/end of line
    nnoremap B ^
    nnoremap E $
    " $/^ doesn't do anything
    nnoremap $ <nop>
    nnoremap ^ <nop>
    " highlight last inserted text
    nnoremap gV `[v`]


" Leader Shortcuts
    " :map <Leader>A oanother line<Esc> equal :map \A oanother line<Esc>
    " <Leader> default is \
    let mapleader=","       " leader is comma
    " ff is escape
    inoremap ff <esc>
    " toggle gundo
    nnoremap <leader>u :GundoToggle<CR>
    " edit vimrc/zshrc and load vimrc bindings
    nnoremap <leader>ev :vsp $MYVIMRC<CR>
    nnoremap <leader>ez :vsp ~/.zshrc<CR>
    nnoremap <leader>sv :source $MYVIMRC<CR>
    " save session
    nnoremap <leader>s :mksession<CR>
    " open ag.vim
    nnoremap <leader>a :Ag
    " NERDTree
    nnoremap <leader>u :NERDTree<CR>

" Lauch Config
"   call pathogen#infect()                      " use pathogen
"   call pathogen#runtime_append_all_bundles()  " use pathogen

" Tmux
    " allows cursor change in tmux mode
    if exists('$TMUX')
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    else
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    endif

" Clang Format Settings
    let g:clang_format#detect_style_file = 1
    " map to <Leader>cf in C++ code
    autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
    autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
    " if you install vim-operator-user
    autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
    " Toggle auto formatting:
    nmap <Leader>C :ClangFormatAutoToggle<CR>

" Custom Functions
    " toggle between number and relativenumber
    function! ToggleNumber()
        if(&relativenumber == 1)
            set norelativenumber
            set number
        else
            set relativenumber
        endif
    endfunc
    
    map <F3> :w<CR>
    map <F4> :call CompileC()<CR>
    function! CompileC()
    let config_param=" `pkg-config --cflags --libs glib-2.0 gtk+-3.0`"
    exec ":w !gcc % -o %<".config_param
    endfunc
    map <F5> :make<CR>

" Autogroups
    augroup configgroup
        autocmd!
        autocmd VimEnter * highlight clear SignColumn
        autocmd FileType java setlocal noexpandtab
        autocmd FileType java setlocal list
        autocmd FileType java setlocal listchars=tab:+\ ,eol:-
        autocmd FileType java setlocal formatprg=par\ -w80\ -T4
        autocmd FileType php setlocal expandtab
        autocmd FileType php setlocal list
        autocmd FileType php setlocal listchars=tab:+\ ,eol:-
        autocmd FileType php setlocal formatprg=par\ -w80\ -T4
        autocmd FileType ruby setlocal tabstop=2
        autocmd FileType ruby setlocal shiftwidth=2
        autocmd FileType ruby setlocal softtabstop=2
        autocmd FileType ruby setlocal commentstring="\ %s
        autocmd FileType python setlocal commentstring="\ %s
        autocmd BufEnter *.cls setlocal filetype=java
        autocmd BufEnter *.zsh-theme setlocal filetype=zsh
        autocmd BufEnter Makefile setlocal noexpandtab
        autocmd BufEnter *.sh setlocal tabstop=2
        autocmd BufEnter *.sh setlocal shiftwidth=2
        autocmd BufEnter *.sh setlocal softtabstop=2
        autocmd BufRead,BufNewFile *.html,*.js setlocal shiftwidth=2
        autocmd BufRead,BufNewFile *.html,*.js setlocal tabstop=2
    augroup END

" quickfix settings:w
    nmap <leader>cn :cn<cr>
    nmap <leader>cp :cp<cr>
    nmap <leader>cw :cw 10<cr>

" Backups

" Wrapping It Up
    " Don't put anything in your .vimrc you don't understand!
    " :help [setting] is your best friend.

" Refer
    " article--http://dougblack.io/words/a-good-vimrc.html
    " Twitter--https://twitter.com/dougblackio
